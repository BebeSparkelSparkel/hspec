hspec aims to be a simple, extendable, and useful tool for Behavior Driven
Development in Haskell.

Step 1, write your specs
> specs = describe "myabs" [
>   it "returns the original number when given a positive input"
>     (myabs 1 == 1),
> 
>   it "returns a positive number when given a negative input"
>     (myabs (-1) == 1),
> 
>   it "returns zero when given zero"
>     (myabs 0 == 0)
>   ]

Step 2, write your dummy function
> myabs n = 0

Step 3, watch them fail
> hspec specs
myabs
 x returns the original number when given a positive input
 x returns a positive number when given a negative input
 - returns zero when given zero

Finished in 0.0 seconds

3 examples, 2 failures

Step 4, implement your requirements
> myabs n = if n < 0 then negate n else n

Step 5, watch them pass
> hspec specs
myabs
 - returns the original number when given a positive input
 - returns a positive number when given a negative input
 - returns zero when given zero

Finished in 0.0 seconds

3 examples, 0 failures




Here's the report of hspec's specs:


describe
 - takes a description of what the requirements are for
 - groups requirements for what's being described

it
 - takes the description of the requirement
 - takes the verification that the requirement was implemented
 - allows a boolean expression to act as verification
 - allows an IO() action to act as verification
 - allows an HUnit Test to act as verification
 - allows a QuickCheck property to act as verification (see "property")
 - allows a verification to be pending (see "pending")
 x catches 'undefined' exceptions

property
 - allows a QuickCheck property to act as verification

pending
 - marks a requirement as pending
 - accepts a message to display in the report

hspec
 - displays each thing being described as a header
 - displays one row for each requirement
 - displays a '-' for successfully implemented requirements
 - displays an 'x' for unsuccessfully implmented requirements
 - displays a '-' for pending requirements
 - displays a '#' and an additional message for pending requirements
 - can output to stdout
 - can output to stdout in color
     # TODO in the near future, perhaps using System.Console.ANSI?
 - summarizes the time it takes to finish
 - summarizes the number of examples and failures

hHspec
 - can output to stdout
 - can output to stdout in color
     # TODO in the near future, perhaps using System.Console.ANSI?
 - can output to an ascii text file

quantify (internal)
 - returns an amount and a word given an amount and word
 - returns a singular word given the number 1
 - returns a plural word given a number greater than 1
 - returns a plural word given the number 0
 - handles describing the plural of words that end with an 'x'
     # no need for this yet

Finished in 0.0826 seconds

31 examples, 1 failure
