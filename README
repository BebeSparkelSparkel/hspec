hspec aims to be a simple, extendable, and useful tool for Behavior Driven Development in Haskell.


Step 1, write your specs
> specs = describe "myabs" [
>   it "returns the original number when given a positive input"
>     (myabs 1 == 1),
> 
>   it "returns a positive number when given a negative input"
>     (myabs (-1) == 1),
> 
>   it "returns zero when given zero"
>     (myabs 0 == 0)
>   ]

Step 2, write your dummy function
> myabs n = undefined

Step 3, watch them fail
> hspec specs
myabs
 x returns the original number when given a positive input (Prelude.undefined)
 x returns a positive number when given a negative input (Prelude.undefined)
 x returns zero when given zero (Prelude.undefined)

Finished in 0.0002 seconds

3 examples, 3 failures

Step 4, implement your requirements
> myabs n = if n < 0 then negate n else n

Step 5, watch them pass
> hspec specs
myabs
 - returns the original number when given a positive input
 - returns a positive number when given a negative input
 - returns zero when given zero

Finished in 0.0000 seconds

3 examples, 0 failures




Here's the report of hspec's specs:


describe
 - takes a description of what the requirements are for
 - groups requirements for what's being described

it
 - takes the description of the requirement
 - takes the verification that the description was implemented
 - can use a Bool, HUnit Test, QuickCheck propertie, or "pending" as a verifier
 - will treat exceptions as failures
 - allows failures to have details

Bool verifier
 - is just an expression that evaluates to a Bool

HUnit verifier
 - allows an HUnit test case with assertions to act as verification
 - is specified with the HUnit "TestCase" data constructor
 - is the assumed verifier for IO() actions
 - will show the assertion text if it fails

QuickCheck verifier
 - allows a QuickCheck property to act as verification
 - is specified with the "property" function

pending verifier
 - allows a requirement to be pending verification
 - is specified with the "pending" function and an explination
 - accepts a message to display in the report

hspec
 - displays each thing being described as a header
 - displays one row for each requirement
 - displays a '-' for successfully implemented requirements
 - displays an 'x' for unsuccessfully implmented requirements
 - displays optional details for unsuccessfully implmented requirements
 - displays a '-' for pending requirements
 - displays a '#' and an additional message for pending requirements
 - can output to stdout
 - can output to stdout in color
     # TODO in the near future, perhaps using System.Console.ANSI?
 - summarizes the time it takes to finish
 - summarizes the number of examples and failures

quantify (an internal function)
 - returns an amount and a word given an amount and word
 - returns a singular word given the number 1
 - returns a plural word given a number greater than 1
 - returns a plural word given the number 0

Finished in 0.0472 seconds

32 examples, 0 failures
